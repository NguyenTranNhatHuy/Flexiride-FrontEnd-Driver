import React, { useEffect } from "react";
import {
  Modal,
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Share,
  Linking,
  Alert,
  PermissionsAndroid,
} from "react-native";
import { Ionicons } from "@expo/vector-icons";
import call from "react-native-phone-call"; // Import th∆∞ vi·ªán h·ªó tr·ª£ g·ªçi ƒëi·ªán

const SupportCenterModal = ({
  visible,
  onClose,
  bookingDetails,
  currentLocation,
  navigation,
}) => {
  useEffect(() => {
    requestCallPermission(); // Y√™u c·∫ßu quy·ªÅn khi modal ƒë∆∞·ª£c m·ªü
  }, []);

  // Y√™u c·∫ßu quy·ªÅn g·ªçi ƒëi·ªán tr√™n Android
  const requestCallPermission = async () => {
    try {
      const granted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.CALL_PHONE,
        {
          title: "C·∫•p quy·ªÅn g·ªçi ƒëi·ªán",
          message: "·ª®ng d·ª•ng c·∫ßn quy·ªÅn ƒë·ªÉ th·ª±c hi·ªán cu·ªôc g·ªçi kh·∫©n c·∫•p.",
          buttonPositive: "ƒê·ªìng √Ω",
        }
      );
      return granted === PermissionsAndroid.RESULTS.GRANTED;
    } catch (err) {
      console.warn(err);
      return false;
    }
  };

  // H√†m th·ª±c hi·ªán cu·ªôc g·ªçi c·∫£nh s√°t
  const handleCallPolice = async () => {
    const phoneNumber = "113"; // S·ªë ƒëi·ªán tho·∫°i c·∫£nh s√°t
    const hasPermission = await requestCallPermission(); // Ki·ªÉm tra quy·ªÅn g·ªçi ƒëi·ªán

    if (!hasPermission) {
      Alert.alert("L·ªói", "·ª®ng d·ª•ng ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn g·ªçi ƒëi·ªán.");
      return;
    }

    const args = {
      number: phoneNumber,
      prompt: true, // Hi·ªÉn th·ªã x√°c nh·∫≠n tr∆∞·ªõc khi th·ª±c hi·ªán cu·ªôc g·ªçi
    };

    call(args)
      .then(() => console.log("G·ªçi c·∫£nh s√°t th√†nh c√¥ng"))
      .catch((error) => {
        console.error("L·ªói khi g·ªçi c·∫£nh s√°t:", error);
        Alert.alert("L·ªói", "Kh√¥ng th·ªÉ th·ª±c hi·ªán cu·ªôc g·ªçi.");
      });
  };

  // H√†m chia s·∫ª chi ti·∫øt chuy·∫øn ƒëi
  const handleShare = async () => {
    try {
      const message = `
        üìç Chi ti·∫øt chuy·∫øn ƒëi c·ªßa t√¥i:
        - ƒêi·ªÉm ƒë√≥n: ${bookingDetails.pickupLocation.address}
        - ƒêi·ªÉm ƒë·∫øn: ${bookingDetails.destinationLocation.address}
        - V·ªã tr√≠ hi·ªán t·∫°i: (${currentLocation.latitude}, ${
        currentLocation.longitude
      })
        - Gi√°: ${
          bookingDetails.price
            ? `${bookingDetails.price} VND`
            : "ƒêang t√≠nh to√°n"
        }
        - D·ªãch v·ª•: ${bookingDetails.serviceName}
      `;
      const result = await Share.share({ message });

      if (result.action === Share.sharedAction) {
        console.log("Chia s·∫ª th√†nh c√¥ng!");
      } else if (result.action === Share.dismissedAction) {
        console.log("Ng∆∞·ªùi d√πng ƒë√≥ng chia s·∫ª.");
      }
    } catch (error) {
      console.error("L·ªói chia s·∫ª:", error);
    }
  };
  const handleOpenEmergencyContacts = () => {
    onClose();
    navigation.navigate("EmergencyContactSupport");
  };

  return (
    <Modal
      animationType="slide"
      transparent
      visible={visible}
      onRequestClose={onClose}
    >
      <View style={styles.modalBackground}>
        <View style={styles.modalContainer}>
          <Text style={styles.modalTitle}>Trung t√¢m An to√†n</Text>
          <TouchableOpacity style={styles.option} onPress={handleShare}>
            <Ionicons name="share-outline" size={24} color="black" />
            <View style={styles.optionTextContainer}>
              <Text style={styles.optionTitle}>Chia s·∫ª chi ti·∫øt chuy·∫øn ƒëi</Text>
              <Text style={styles.optionDescription}>
                G·ª≠i v·ªã tr√≠ tr·ª±c ti·∫øp v√† t√¨nh tr·∫°ng chuy·∫øn ƒëi c·ªßa b·∫°n cho gia
                ƒë√¨nh v√† b·∫°n b√®.
              </Text>
            </View>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.option}
            onPress={handleOpenEmergencyContacts}
          >
            <Ionicons name="alert-circle-outline" size={24} color="black" />
            <View style={styles.optionTextContainer}>
              <Text style={styles.optionTitle}>B√°o c√°o s·ª± c·ªë an to√†n</Text>
              <Text style={styles.optionDescription}>
                H√£y cho ch√∫ng t√¥i bi·∫øt nh·ªØng n·ªói lo c·ªßa b·∫°n v·ªÅ v·∫•n ƒë·ªÅ an to√†n.
              </Text>
            </View>
          </TouchableOpacity>
          <TouchableOpacity style={styles.option} onPress={handleCallPolice}>
            <Ionicons name="call-outline" size={24} color="red" />
            <View style={styles.optionTextContainer}>
              <Text style={[styles.optionTitle, { color: "red" }]}>
                T√¥i c·∫ßn c·∫£nh s√°t
              </Text>
              <Text style={styles.optionDescription}>
                Ph√°t ƒë·ªông cu·ªôc g·ªçi cho c·∫£nh s√°t. C√°c s·ªë li√™n l·∫°c kh·∫©n c·∫•p c·ªßa
                b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn SMS.
              </Text>
            </View>
          </TouchableOpacity>
          <TouchableOpacity style={styles.closeButton} onPress={onClose}>
            <Text style={styles.closeButtonText}>ƒê√≥ng</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalBackground: {
    flex: 1,
    justifyContent: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
  },
  modalContainer: {
    margin: 20,
    padding: 20,
    backgroundColor: "white",
    borderRadius: 10,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 15,
  },
  option: {
    flexDirection: "row",
    alignItems: "center",
    paddingVertical: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ddd",
  },
  optionTextContainer: {
    marginLeft: 10,
    flex: 1,
  },
  optionTitle: {
    fontSize: 16,
    fontWeight: "bold",
  },
  optionDescription: {
    fontSize: 14,
    color: "#555",
  },
  closeButton: {
    marginTop: 20,
    alignSelf: "center",
    padding: 10,
    backgroundColor: "#ccc",
    borderRadius: 5,
  },
  closeButtonText: {
    fontSize: 16,
  },
});

export default SupportCenterModal;
